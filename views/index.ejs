<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Probability of Precipitation</title>
  
  <link rel="stylesheet" ref="./assets/styles.css">
</head>

<body>
  <button id="start">Click!</button>
  <button id="test">Test!</button>

  <div class="container">
    <p>Teleporter Stage: <span id="stage" data-value=1>1</span></p>
    <p>Difficulty: <span id="difficulty" data-value=1>1</span></p>
    <hr>
    <p>Mob Health: <span id="m_health" data-value=0>100</span></p>
    <p>Mob Gold: <span id="m_gold" data-value=0>100</span></p>
    <p>Mob DPS: <span id="m_dps" data-value=0>100</span></p>
    <hr>
    <p>Player Health: <span id="p_health" data-value=100>100</span></p>
    <p>Player DPS: <span id="p_dps" data-value=5>5</span></p>
    <p>Player HPS: <span id="p_hps" data-value=0>0</span></p>
    <p>Player Gold: <span id="p_gold" data-value=0>0</span></p>
    <hr>
    <p>Total Living Mobs: <span id="t_enemies" data-value=0>0</span></p>
    <p>Total Mob Health: <span id="t_health" data-value=0>0</span></p>
    <p>Total Mobs: <span id="t_mobs" data-value=0>0</span></p>
    <p>Total Damage: <span id="t_dmg" data-value=0>0</span></p>
    <p>Total Kills: <span id="t_kills" data-value=0>0</span></p>
    
  </div>
<script>
  let teleporterStage = 1;
  let difficulty = 1;
  let spawnProbability = 0.5;

  const gameState = {
    p_health  : {div:document.querySelector('#p_health'), val:10},
    p_dps     : {div:document.querySelector('#p_dps'), val:5},
    p_gold    : {div:document.querySelector('#p_gold'), val:0},
    p_hps     : {div:document.querySelector('#p_hps'), val:0},

    m_health  : {div:document.querySelector('#m_health'), val:10},
    m_dps     : {div:document.querySelector('#m_dps'), val:5},
    m_gold    : {div:document.querySelector('#m_gold'), val:10},

    t_health  : {div:document.querySelector('#t_health'), val:0},
    t_mobs    : {div:document.querySelector('#t_mobs'), val:0},
    t_enemies : {div:document.querySelector('#t_enemies'), val:0},
    t_kills   : {div:document.querySelector('#t_kills'), val:0},
    t_dmg     : {div:document.querySelector('#t_dmg'), val:0},
  }
    
  function updateValue(value, valueChange) {
    // Update actual value of valueName by valueAmount
    value.val += valueChange;
    // Update the corresponding div
    if (value.div) {
      value.div.dataset.value = value.val;
      value.div.textContent = value.val;
    };
  };
  
  function iterateStage() {
    // Spawn mobs
    if (spawnMob()) {
      updateValue(t_mobs, 1);
      updateValue(t_enemies, 1);
      updateValue(t_health, m_health.val);
    };

    if (t_health.val > 0) {
      // Player damage in a turn cannot be greater than total enemy health or less than zero
      const new_dmg = Math.max(0, Math.min(gameState['p_dps'].val, gameState['t_health'].val))
      if (new_dmg > 0) {
        // New total damage is calculated
        updateValue(gameState['t_dmg'], new_dmg);
        // New kills are calculated
        const new_kills = Math.max(Math.ceil(t_health.val / m_health.val) - Math.ceil((t_health.val - p_dps.val) / m_health.val), 0);
        // New total mob health pool is calculated
        updateValue(t_health, -new_dmg);
        if (new_kills > 0) {        
          console.log("New Kills: " + new_kills);
          // Update total kill count
          updateValue(t_kills, new_kills);
          updateValue(t_enemies, -new_kills);
          // Update player gold
          updateValue(p_gold, new_kills * m_gold.val);
        };
      };
      // Update player health after healing
      updateValue(p_health, p_hps.val);
      // Update player health after mob damage
      updateValue(p_health, -(m_dps.val * Math.ceil(t_health.val / m_health.val)));
    };
  };
    
  // Start Game
  const startButton = document.querySelector("#start");
  
  function startRun() {
    prevStart = Date.now();
      console.log("Run Started!");
    const runId = setInterval(() => {
      iterateStage();
      // Check if player died
      checkDeath(runId);
    }, 1000);
  };
  
  function checkDeath(runId) {
    if (p_health.val === 0) {clearInterval(runId)};
  };
  
  startButton.addEventListener("click", startRun);
  
  const testButton = document.querySelector("#test");
  
  function testRun() {
    prevStart = Date.now();
    iterateStage();
  }
  
  testButton.addEventListener("click", testRun);
  
  function spawnMob() {
    const roll = Math.random();
    if (roll >= spawnProbability) {
      return true
    } else {
      return false
    }
  };
  
</script>
  
</body>


</html>